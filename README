Radical Reducer
---------------
This program reduces radicals of (probably) any degree to its most basic exact
form. There are several things to be fixed, which you can find by looking at
the comments I've left in the program.

Given the degree of the root and the radicand, the program uses the formula
(n√(x)/i)^n = y => √x = i√y, where n is the degree of the root, x is the
radicand, i is any positive integer above 0 and below the value of the root,
and y is the computed value. Essentially, this formula combines every step you
need to simplify radicals into one. You can try out the equation yourself in a
calculator or in this program. Currently there are many potential improvements
I can think of for the algorithm by which the formula is implemented.

One thing you might notice is that roots are actually approximated instead of
exactly computed. This is because it seems that fractional exponents don't work
and there aren't enough pre-defined functions for roots. Instead, the
Newton-Raphson method is used to approximate any root (as far as I know from
the limited amount of testing I've done.) However, with large numbers this will
produce a (probably) exponential amount of error...

The biggest problems are with inefficiencies in the Newton-Raphson method
function (the first best guess and the amount of iterations need to be better
defined); the way that the final output is displayed (it can be modularized and
the radicand may have a value of 1 if it is already a perfect nth root); the
way the program checks if a number is whole or not in simplify(); and the
method of input, which is just a scanf() function. There are likely more fun
problems to solve.
